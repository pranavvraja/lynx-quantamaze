// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  //directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  role          Role            @default(USER)
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Clinic      Clinic[]      @relation("ClinicOwner")
  AdminIn     Clinic[]      @relation("ClinicAdmin")
  Appointment Appointment[]
  Files       Files[]
  medicalData medicalData[]
}

enum Role {
  USER
  ADMIN
  SUPERADMIN
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Clinic {
  id          String        @id @default(cuid())
  name        String
  address     String
  description String
  ownerId     String
  owner       User          @relation("ClinicOwner", fields: [ownerId], references: [id])
  admins      User[]        @relation("ClinicAdmin")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Appointment Appointment[]
}

model Appointment {
  id                String   @id @default(cuid())
  appointmentDate   DateTime
  appointmentNumber Int
  clinicId          String
  status            String   @default("PENDING")
  clinic            Clinic   @relation(fields: [clinicId], references: [id])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  User              User?    @relation(fields: [userId], references: [id])
  userId            String?
}

enum Gender {
  Male
  Female
  Other
}

model Files {
  id        String   @id @default(cuid())
  userId    String
  User      User?    @relation(fields: [userId], references: [id])
  url       String
  createdAt DateTime @default(now())
}

model medicalData {
  id     String @id @default(cuid())
  userId String @unique
  User   User?  @relation(fields: [userId], references: [id])
  data   Json   @default("{}")
}
